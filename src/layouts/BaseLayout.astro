---
import "../styles/backup.css";
import Navbar from "../comps/Navbar.astro";
// Get the title from props with a default value
const { title = "jaywalking" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>
  <!-- KaTeX styling -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.css">
  <!-- Optional: Add custom fonts for code blocks -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jetbrains-mono@1.0.6/css/jetbrains-mono.min.css">
  <!-- KaTeX scripts -->
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js"
  onload="renderMathInElement(document.body, 
      { delimiters: [{left: '$$', right: '$$', display: true},
      {left: '$', right: '$', display: false}] })">
      </script>
</head>

<body>
  <div class="theme-toggle">
  How do you like your coffee? 
  <button id="theme-btn" type="button">
    <span id="theme-text">Cream</span>
  </button>
</div>

<style>
.theme-toggle {
  position: fixed;
  top: 10px;
  left: 10px;
  font-size: 10px;
  color: var(--colour-text-muted);
  z-index: 1000;
  font-family: 'Go Mono', monospace;
  display: flex;
  align-items: center;
  gap: 4px;
}

#theme-btn {
  background: none;
  border: 1px solid var(--colour-text-muted);
  color: var(--colour-text-muted);
  font-size: 10px;
  padding: 2px 6px;
  cursor: pointer;
  border-radius: 3px;
  font-family: 'Go Mono', monospace;
  transition: all 0.2s ease;
  margin-right: 6px;

}

#theme-btn:hover {
  background: var(--colour-accent);
  color: var(--colour-background);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const themeBtn = document.getElementById('theme-btn');
  const themeText = document.getElementById('theme-text');
  
  /**
   * @param {string} theme
   */
  /**
   * @param {string} theme
   */
  function updateThemeNote(theme: string) {
    const existing = document.querySelector('.theme-note');
    if (existing) existing.remove();
    
    const note = document.createElement('span');
    note.className = 'theme-note';
    note.style.cssText = 'font-style: italic; opacity: 0.7; margin-left: 8px;';
    note.textContent = theme === 'dark' 
      ? 'Note: Figures may be hard to read in Dark mode'
      : 'Note: Light mode is ideal for figures';
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
      themeToggle.appendChild(note);
    }
  }
  
  // Set initial theme
  const savedTheme = localStorage.getItem('theme') || 'light';
  document.documentElement.setAttribute('data-theme', savedTheme);
  if (themeText) {
    themeText.textContent = savedTheme === 'dark' ? 'Black' : 'Cream';
  }
  updateThemeNote(savedTheme);
  
  // Handle clicks
  if (themeBtn) {
    themeBtn.addEventListener('click', () => {
      const newTheme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', newTheme);
      if (themeText) {
        themeText.textContent = newTheme === 'dark' ? 'Black' : 'Cream';
      }
      localStorage.setItem('theme', newTheme);
      updateThemeNote(newTheme);
    });
  }
});
</script>

  <header class="header">
    <div class="header-top">
      <div class="title-wrapper">
        <a href="/" class="site-title"> jaywalking </a>
      </div>
      <Navbar />
    </div>
    <h2 class="subheader"> </h2> 
  </header>
  <main>
    <slot />
  </main>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get CSS variables from the document
    const rootStyles = getComputedStyle(document.documentElement);
    const colors = [
      rootStyles.getPropertyValue('--colour-tag1').trim(),
      rootStyles.getPropertyValue('--colour-tag2').trim(),
      rootStyles.getPropertyValue('--colour-tag3').trim(),
      rootStyles.getPropertyValue('--colour-tag4').trim(),
      rootStyles.getPropertyValue('--colour-tag5').trim(),
      rootStyles.getPropertyValue('--colour-tag6').trim()
    ];
    
    const bolds = document.querySelectorAll('b');
    bolds.forEach(b => {
      const color = colors[Math.floor(Math.random() * colors.length)];
      b.style.color = color;
    });
  });
</script>
</body>
</html>
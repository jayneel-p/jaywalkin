---
// RecordCollage.astro
import RecordTile from '../components/record_tile.astro';

interface Props {
  records: Array<{
    id: string;
    artist: string;
    title: string;
    year: number;
    rating: number | null;
    coverUrl: string;
    genres: string[];
    personalNote?: string;
  }>;
}

const { records } = Astro.props;

// Shuffle records for more organic layout (optional)
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Sort by rating (highest first) but add some randomization
const sortedRecords = records.sort((a, b) => {
  const ratingA = a.rating || 0;
  const ratingB = b.rating || 0;
  if (ratingA === ratingB) {
    // Add some randomness for records with same rating
    return Math.random() - 0.5;
  }
  return ratingB - ratingA;
});

// Optional: You could also use shuffled for more random feel
// const displayRecords = shuffleArray(records);
const displayRecords = sortedRecords;
---

<div class="record-collage">
  {displayRecords.map((record) => (
    <RecordTile record={record} />
  ))}
</div>

<style>
  .record-collage {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    justify-content: center;
    align-items: flex-start;
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  /* Add some visual breathing room */
  .record-collage::before,
  .record-collage::after {
    content: '';
    flex: 1;
    max-width: 2rem;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .record-collage {
      gap: 1rem;
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .record-collage {
      gap: 0.75rem;
      padding: 0.75rem;
    }
  }
</style>
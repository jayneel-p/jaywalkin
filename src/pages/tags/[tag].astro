---
import BaseLayout from "../../layouts/TestLayout.astro";

// Define interfaces
interface Frontmatter {
  title: string;
  date: string;
  description?: string;
  tags?: string[];
}

interface Post {
  url: string;
  frontmatter: Frontmatter;
}

export async function getStaticPaths() {
  const allPosts = Object.values(
    import.meta.glob<Post>('/src/pages/articles/*.md', { eager: true })
  ).sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

  const allTags = [...new Set(allPosts.flatMap((p) => p.frontmatter.tags || []))];

  return allTags.map(tag => ({
    params: { tag },
    props: {
      tag,
      posts: allPosts,
      allTags,
    }
  }));
}

// Props from getStaticPaths
const { tag, posts, allTags } = Astro.props;

// Filter posts by tag
const filteredPosts = posts.filter((p) => p.frontmatter.tags?.includes(tag));

const colorVars = [
  '--accent-yellow',
  '--accent-red',
  '--accent-green',
  '--highlight-purple',
  '--highlight-pink',
  '--highlight-salmon',
  '--highlight-dandelion',
  '--highlight-blue',
  '--highlight-olive',
];

const tagIndex = allTags.indexOf(tag);
const tagColor = tagIndex >= 0
  ? `var(${colorVars[tagIndex % colorVars.length]})`
  : 'var(--highlight-olive)';
---

<BaseLayout title={`Posts tagged: ${tag}`}>
  <section class="p-4 mx-auto max-w-3xl">
    <h1 class="text-3xl font-bold mb-4" style={`color: ${tagColor}; font-size: 1rem; margin-bottom: 1rem; margin-top: 1rem;`}>
      All Posts With Tag: {tag}
    </h1>
    <ul class="article-list">
      {filteredPosts.map((post) => {
        const { title, date, description, tags = [] } = post.frontmatter;
        return (
          <li class="article-item mb-6">
            <div class="article-header">
              <a href={post.url} class="article-link" style={`border-bottom: 3px solid ${tagColor};`}>
                {title}
              </a>
              <span class="article-date ml-4">{date}</span>
            </div>
            {description && <p class="article-desc mt-2">{description}</p>}
            <div class="tag-list mt-1">
              {tags.map((t) => {
                const i = allTags.indexOf(t);
                const color = i >= 0 ? `var(${colorVars[i % colorVars.length]})` : 'var(--highlight-olive)';
                return (
                  <a class="tag-inline" href={`/tags/${t}`} style={`color: ${color};`}>
                    {t}
                  </a>
                );
              })}
            </div>
          </li>
        );
      })}
    </ul>
  </section>
</BaseLayout>

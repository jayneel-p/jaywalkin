---
import BaseLayout from '../../layouts/BaseLayout.astro';

interface Frontmatter {
  title: string;
  date: string;
  description: string;
  tags?: string[];
}

interface Post {
  url: string;
  frontmatter: Frontmatter;
}

// Setup color variables
const colorVars = [
  '--accent-yellow',
  '--accent-red',
  '--accent-green',
  '--highlight-purple',
  '--highlight-pink',
  '--highlight-salmon',
  '--highlight-dandelion',
  '--highlight-blue',
  '--highlight-olive',
];

export async function getStaticPaths() {
  // Get all posts with import.meta.glob as in your index.astro
  const allPosts = Object.values(import.meta.glob<Post>('/src/pages/articles/*.md', { eager: true }));
  
  // Get all unique tags from posts
  const allTags = [...new Set(allPosts.flatMap((post) => post.frontmatter.tags || []))];
  
  // Return a path for each tag with all posts as props
  return allTags.map(tag => ({
    params: { tag },
    props: { 
      posts: allPosts,
      allTags
    }
  }));
}

// Get the current tag from params
const { tag } = Astro.params;

// Get data passed as props
const { posts, allTags } = Astro.props;

// Filter posts by the current tag
const filteredPosts = posts.filter(post => post.frontmatter.tags?.includes(tag));

// Format tag for display
const formattedTag = tag.charAt(0).toUpperCase() + tag.slice(1);

// Get tag color index
const tagIndex = allTags.indexOf(tag);
---

<BaseLayout>
  <section>
    <h2 class="tag-subheader">Articles tagged with "{formattedTag}"</h2>
    <ul class="article-list">
      {filteredPosts.map((post) => {
        const { title, description, date, tags = [] } = post.frontmatter;
        const firstTag = tags[0];
        const firstTagIndex = allTags.indexOf(firstTag);
        const color = firstTagIndex >= 0 ? `var(${colorVars[firstTagIndex % colorVars.length]})` : 'var(--highlight-blue)';
        
        return (
          <li class="article-item">
            <div class="article-header">
              <a class="article-link" href={post.url} style={`border-bottom: 3px solid ${color};`}>
                {title}
              </a>
              <span class="article-date">{date}</span>
            </div>
            <p class="article-desc">{description}</p>
            <div class="tag-list">
              {tags.map((tag) => {
                const i = allTags.indexOf(tag);
                return (
                  <a class="tag-inline" href={`/tags/${tag}`} style={`color: var(${colorVars[i % colorVars.length]});`}>
                    {tag}
                  </a>
                );
              })}
            </div>
          </li>
        );
      })}
    </ul>
  </section>
</BaseLayout>